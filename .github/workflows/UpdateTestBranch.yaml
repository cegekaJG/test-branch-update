name: Update Test Branch

on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main

env:
  TEST_BRANCH: testmaster
  CPICK_BRANCH_TEMPLATE: cherry-pick/${{ github.head_ref }}
  FEATURE_TEST_BRANCH: test/${{ github.head_ref }}
  BOT_COMMENT_TAG: <!-- Test -->

jobs:
  update_test_branch:
    name: Update Test Branch
    runs-on: ubuntu-latest
    steps:
      - name: Check PR status
        id: check_pr
        continue-on-error: true
        run: |
          if [ ${{github.head_ref}} == ${{env.TEST_BRANCH}} ]; then
            echo "::error::You cannot update the ${{env.TEST_BRANCH}} branch with itself. Please create a new branch and try again."
          fi
          if [ ${{github.head_ref}} == "dev/"* ]; then
            echo "::error::The head branch of this pull request begins with "dev/". Changes from this branch will not be cherry-picked into the ${{env.TEST_BRANCH}} branch."
          fi
          if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
            echo "::error::This pull request is a draft. Update workflow cancelled."
          fi
          if [[ "${{ github.event.pull_request.labels }}" == *"Automated"* ]]; then
            echo "::error::This pull request is automated. Update workflow cancelled."
          fi

      - name: Checkout repository
        if: ${{ steps.check_pr.outcome == 'success' }}
        uses: actions/checkout@v4.1.1

      - name: Set up Git
        if: ${{ steps.check_pr.outcome == 'success' }}
        run: |
          git config --global user.name github-actions[bot]
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Check if ${{ env.TEST_BRANCH }} exists
        id: check_test_branch
        if: ${{ steps.check_pr.outcome == 'success' }}
        run: |
          if [ -z "$(git ls-remote --heads origin ${{ env.TEST_BRANCH }})" ]; then
            echo "::error::Branch ${{ env.TEST_BRANCH }} does not exist. Please create the branch and try again."
          fi
          git fetch origin ${{ env.TEST_BRANCH }}

      - name: Get newest commit hash
        id: get_commit_hash
        if: ${{ steps.check_pr.outcome == 'success' }}
        run: |
          newest_commit_hash=$(git rev-parse --short HEAD)
          echo "NEWEST_COMMIT_HASH=$newest_commit_hash" >> "$GITHUB_OUTPUT"
          echo "Newest commit hash (short): $newest_commit_hash"

      - name: Create temporary cherry-pick branch of target branch
        id: create_temp_branch
        if: ${{ steps.check_pr.outcome == 'success' }}
        run: |
          cherry_pick_branch="${{ env.CPICK_BRANCH_TEMPLATE }}/${{ steps.get_commit_hash.outputs.NEWEST_COMMIT_HASH }}"
          echo "CHERRY_PICK_BRANCH=$cherry_pick_branch" >> "$GITHUB_OUTPUT"
          git fetch origin ${{ github.base_ref }}
          git checkout ${{ github.base_ref }}
          git checkout -b $cherry_pick_branch

      - name: Squash merge ${{ github.head_ref }} into temporary cherry-pick branch
        id: merge_commit
        if: ${{ steps.check_pr.outcome == 'success' }}
        run: |
          git fetch origin ${{ github.head_ref }}
          merge_commit_msg="CHERRYPICK-ME ${{ github.head_ref }}/${{ steps.get_commit_hash.outputs.NEWEST_COMMIT_HASH }}"

          git merge --squash -n "origin/${{ github.head_ref }}"
          if [ "$(git status --porcelain | grep '^U')" ]; then
            echo "::error::Unable to create squash merge commit. Please merge the latest changes to ${{ github.base_ref}} into the head branch ${{ github.head_ref }} and try again."
            exit 1
          fi
          git commit -m "$merge_commit_msg"
          git push origin "${{ steps.create_temp_branch.outputs.CHERRY_PICK_BRANCH }}"

          echo "MERGE_COMMIT_MSG=$merge_commit_msg" >> "$GITHUB_OUTPUT"
          echo "MERGE_COMMIT_SHA=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Create/Checkout ${{ env.FEATURE_TEST_BRANCH }}
        if: ${{ steps.check_pr.outcome == 'success' }}
        run: |
          if [ -z "$(git ls-remote --heads origin ${{ env.FEATURE_TEST_BRANCH }})" ]; then
            git checkout ${{ env.TEST_BRANCH }}
            git checkout -b ${{ env.FEATURE_TEST_BRANCH }}
            git push origin ${{ env.FEATURE_TEST_BRANCH }}
          else
            git fetch origin ${{ env.FEATURE_TEST_BRANCH }}
            git checkout ${{ env.FEATURE_TEST_BRANCH }}
          fi

      - name: Cherry-pick squash merge commit
        continue-on-error: true
        id: cherry_pick
        if: ${{ steps.check_pr.outcome == 'success' }}
        run: |
          git cherry-pick --no-commit ${{ steps.merge_commit.outputs.MERGE_COMMIT_SHA }}
          if [ $? -ne 0 ]; then
            echo "::error::Cherry-pick failed. Please cherry-pick the commit '${{ steps.merge_commit.outputs.MERGE_COMMIT_MSG }} (${{ steps.merge_commit.outputs.MERGE_COMMIT_SHA }}) into ${{ env.FEATURE_TEST_BRANCH}}"
          fi

      - name: "On success: Commit & push cherry-picked changes"
        if: ${{ steps.cherry_pick.outcome == 'success'}}
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Cherry-pick changes from ${{ github.head_ref }} up to ${{ steps.get_commit_hash.outputs.NEWEST_COMMIT_HASH }}"
          fi
          if [ -z "$(git log origin/${{ env.FEATURE_TEST_BRANCH }}..${{ env.FEATURE_TEST_BRANCH }})" ]; then
            git push origin ${{ env.FEATURE_TEST_BRANCH }}
          fi

      - name: "On success: Cleanup cherry-pick branch"
        if: ${{ steps.cherry_pick.outcome == 'success'}}
        run: |
          git branch -D ${{ steps.create_temp_branch.outputs.CHERRY_PICK_BRANCH }}
          git push origin --delete ${{ steps.create_temp_branch.outputs.CHERRY_PICK_BRANCH }}
          git branch | grep '${{ env.CPICK_BRANCH_TEMPLATE }}' | xargs -I {} git push origin --delete {}

      - name: "On failure: Abort cherry-pick & add empty commit"
        if: ${{ steps.cherry_pick.outcome == 'failure'}}
        run: |
          git reset --hard
          git fetch origin ${{ env.TEST_BRANCH }}
          git commit --allow-empty -m "Cherry-pick of ${{ steps.create_temp_branch.outputs.CHERRY_PICK_BRANCH }} failed. Manual resolution required."
          git push origin ${{ env.FEATURE_TEST_BRANCH }}

      - name: "On failure: Report merge conflict"
        if: ${{ steps.cherry_pick.outcome == 'failure'}}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '${{ env.BOT_COMMENT_TAG }}\n' +
              '@${{ github.actor }}: ${{ env.TEST_BRANCH }} update failed.\n' +
              'To manually resolve the merge conflicts, please follow these steps:\n\n' +
              '1) Checkout the branch ${{ env.FEATURE_TEST_BRANCH }}.\n' +
              '2) In a terminal with Git, enter the following command to start the cherry-pick:\n' +
              '```git cherry-pick ${{ steps.merge_commit.outputs.MERGE_COMMIT_SHA }} -m ' +
              '"Cherry-pick changes from ${{ github.head_ref }} up to ' +
              '${{ steps.get_commit_hash.outputs.NEWEST_COMMIT_HASH }}"```\n' +
              '3) Resolve the merge conflicts and push the changes.\n' +
              '4) Delete the branch `${{ steps.create_temp_branch.outputs.CHERRY_PICK_BRANCH }}` with the following command:\n' +
              '```git push origin --delete ${{ steps.create_temp_branch.outputs.CHERRY_PICK_BRANCH }}```.'
            })

      - name: "On success: Clean up comments"
        if: ${{ steps.cherry_pick.outcome == 'success' }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            }).then(comments => {
              comments.data.forEach(comment => {
                if (comment.user.login === 'github-actions[bot]' && comment.body.includes('${{ env.BOT_COMMENT_TAG }}')) {
                  github.rest.issues.deleteComment({
                    comment_id: comment.id,
                    owner: context.repo.owner,
                    repo: context.repo.repo
                  })
                }
              })
            })
