name: Update Test Branch

on:
  pull_request:
    types:
      labeled
    branches:
      - master
      - main

env:
  TEST_BRANCH: test/main
  CPICK_BRANCH_TEMPLATE: cherry-pick/${{ github.head_ref }}
  FEATURE_TEST_BRANCH: test/${{ github.head_ref }}
  TRIGGER_LABEL: Ready for Test
  NOTICE_COMMENT_TAG: <!-- UpdateTestBranch/NOTICE -->
  COMMIT_COMMENT_TAG: <!-- UpdateTestBranch/COMMIT -->
  BOT_LABEL: Automated
  DISABLE_COMMENTS: false
  SKIP_ALL: false
  LABEL_MATCH: false
  FEATURE_COMMITS: ''
  PICKED_COMMITS: ''
  ADDED_COMMITS: ''
  MISSING_COMMITS: ''
  TEST_PR_URL: ''
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  update_test_branch:
    name: Update Test Branch
    runs-on: ubuntu-latest
    outputs:
      LABEL_MATCH: ${{ env.LABEL_MATCH }}
    steps:
      - name: Set environment variables
        run: |
          echo "TEST_BRANCH=${{ vars.UPDATETESTBRANCH_TEST_BRANCH || env.TEST_BRANCH }}" >> $GITHUB_ENV
          echo "CPICK_BRANCH_TEMPLATE=${{ vars.UPDATETESTBRANCH_CPICK_BRANCH_TEMPLATE || env.CPICK_BRANCH_TEMPLATE }}" >> $GITHUB_ENV
          echo "FEATURE_TEST_BRANCH=${{ vars.UPDATETESTBRANCH_FEATURE_TEST_BRANCH || env.FEATURE_TEST_BRANCH }}" >> $GITHUB_ENV
          echo "TRIGGER_LABEL=${{ vars.UPDATETESTBRANCH_TRIGGER_LABEL || env.TRIGGER_LABEL }}" >> $GITHUB_ENV
          echo "NOTICE_COMMENT_TAG=${{ vars.UPDATETESTBRANCH_NOTICE_COMMENT_TAG || env.NOTICE_COMMENT_TAG }}" >> $GITHUB_ENV
          echo "COMMIT_COMMENT_TAG=${{ vars.UPDATETESTBRANCH_COMMIT_COMMENT_TAG || env.COMMIT_COMMENT_TAG }}" >> $GITHUB_ENV
          echo "BOT_LABEL=${{ vars.UPDATETESTBRANCH_BOT_LABEL || env.BOT_LABEL }}" >> $GITHUB_ENV
          echo "DISABLE_COMMENTS=${{ vars.UPDATETESTBRANCH_DISABLE_COMMENTS || env.DISABLE_COMMENTS }}" >> $GITHUB_ENV

      - name: Check if label matches trigger label
        run: |
          triggerLabel="${{ env.TRIGGER_LABEL }}"
          eventLabel="${{ github.event.label.name }}"

          if [ "$eventLabel" != "$triggerLabel" ]; then
            echo "SKIP_ALL=true" >> $GITHUB_ENV
            echo "::notice::Label $eventLabel does not match trigger label $triggerLabel. Skipping update."
          else
            echo "LABEL_MATCH=true" >> $GITHUB_ENV
          fi

      - name: Checkout repository
        if: ${{ env.SKIP_ALL == 'false' }}
        uses: actions/checkout@v4.1.1

      - name: Set up Git
        if: ${{ env.SKIP_ALL == 'false' }}
        run: |
          git config --global user.name github-actions[bot]
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Check PR status
        if: ${{ env.SKIP_ALL == 'false' }}
        run: |
          if [ "${{ github.head_ref }}" == "${{ env.TEST_BRANCH }}" ]; then
            echo "::error::You cannot update the test branch `${{ env.TEST_BRANCH }}` with itself. Please use a different branch."
            exit 1
          fi

      - name: Check if ${{ env.TEST_BRANCH }} exists
        if: ${{ env.SKIP_ALL == 'false' }}
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            try {
              execSync(`git fetch origin ${process.env.TEST_BRANCH}`);
            } catch (error) {
              core.setFailed(`Branch ${process.env.TEST_BRANCH} does not exist. Please create the branch and try again.`);
            }

      - name: Get list of feature commits
        id: get_feature_commits
        if: ${{ env.SKIP_ALL == 'false' }}
        run: |
          git fetch origin ${{ github.base_ref }}
          git fetch origin ${{ github.head_ref }}
          feature_commits=$(git log --reverse --no-merges --pretty=format:%h origin/${{ github.base_ref }}..origin/${{ github.head_ref }})
          feature_commits_pretty=$(git log --reverse --no-merges --pretty=format:"- %s (%H)" origin/${{ github.base_ref }}..origin/${{ github.head_ref }})

          echo -e 'Feature commits:\n'"$feature_commits_pretty"
          for commit in $feature_commits; do
            echo "::debug::$commit"
          done

          if [ -z "$feature_commits" ]; then
            echo "SKIP_ALL=true" >> $GITHUB_ENV
            echo "::notice::No new commits found. Skipping update."
          fi

          {
            echo "FEATURE_COMMITS<<EOF"
            echo "$feature_commits"
            echo "EOF"
          } >> $GITHUB_ENV

      - name: Check if ${{ env.FEATURE_TEST_BRANCH }} exists
        id: check_feature_test_branch
        if: ${{ env.SKIP_ALL == 'false' }}
        run: |
          if [ -z "$(git ls-remote --heads origin ${{ env.FEATURE_TEST_BRANCH }})" ]; then
            echo "No branch ${{ env.FEATURE_TEST_BRANCH }} found."
            echo "SKIP_CHERRY_LIST=true" >> $GITHUB_OUTPUT
          else
            echo "Branch ${{ env.FEATURE_TEST_BRANCH }} found."
            echo "SKIP_CHERRY_LIST=false" >> $GITHUB_OUTPUT
          fi

      - name: Get list of already cherry-picked commits
        id: get_cherry_picked_commits
        if: ${{ env.SKIP_ALL == 'false' && steps.check_feature_test_branch.outputs.SKIP_CHERRY_LIST == 'false' }}
        run: |
          git fetch origin ${{ env.TEST_BRANCH }}
          git fetch origin ${{ env.FEATURE_TEST_BRANCH }}
          picked_commits=$(git log --reverse --no-merges --pretty=format:%h origin/${{ env.FEATURE_TEST_BRANCH }}..origin/${{ env.TEST_BRANCH }})
          picked_commits_pretty=$(git log --reverse --no-merges --pretty=format:"- %s %H" origin/${{ env.FEATURE_TEST_BRANCH }}..origin/${{ env.TEST_BRANCH }})

          echo -e 'Cherry-picked commits:\n'"$picked_commits_pretty"
          for commit in $picked_commits; do
            echo "::debug::$commit"
          done

          {
            echo "PICKED_COMMITS<<EOF"
            echo "$picked_commits"
            echo "EOF"
          } >> $GITHUB_ENV

      - name: Get list of already added commits from PR comments
        id: get_added_commits
        if: ${{ env.SKIP_ALL == 'false' }}
        uses: actions/github-script@v7
        with:
          script: |
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            const addedCommits = comments.data
              .filter(comment => comment.body.startsWith('${{ env.COMMIT_COMMENT_TAG }}'))
              .flatMap(comment => {
                const lines = comment.body.split('\n');
                const commitLines = lines.filter(line => line.startsWith('- '));
                process.stdout.write(`${JSON.stringify(commitLines)}\n`);
                return commitLines.map(line => line.slice(2));
              });
            core.setOutput('ADDED_COMMITS', JSON.stringify(addedCommits))

      - name: Determine commits to cherry-pick
        if: ${{ env.SKIP_ALL == 'false' }}
        run: |
          feature_commits=(${{ env.FEATURE_COMMITS }})
          picked_commits=(${{ env.PICKED_COMMITS }})
          added_commits=(${{ env.ADDED_COMMITS }})

          echo -e 'Feature commits: '"${feature_commits[*]}"
          if [ -n "$picked_commits" ]; then
            echo -e 'Picked commits: '"${picked_commits[*]}"
          fi
          if [ -n "$added_commits" ]; then
            echo -e 'Added commits: '"${added_commits[*]}"
          fi

          new_commits=()
          if [ -z "$picked_commits" ] && [ -z "$added_commits" ]; then
            new_commits=("${feature_commits[@]}")
          else
            for commit in "${feature_commits[@]}"; do
              if [[ ! " ${picked_commits[@]} " =~ " $commit " ]] && [[ ! " ${added_commits[@]} " =~ " $commit " ]]; then
                new_commits+=($commit)
              fi
            done
          fi
          if [ -z "$new_commits" ]; then
            echo "SKIP_ALL=true" >> $GITHUB_ENV
            echo "::notice::No new commits to cherry-pick found. Skipping update."
          else
            echo 'New commits: '"${new_commits[*]}"
          fi

          {
            echo "FEATURE_COMMITS<<EOF"
            echo "${new_commits[*]}"
            echo "EOF"
          } >> $GITHUB_ENV

      - name: Create/Checkout ${{ env.FEATURE_TEST_BRANCH }}
        if: ${{ env.SKIP_ALL == 'false' }}
        run: |
          git fetch origin ${{ env.TEST_BRANCH }}
          if [ -z "$(git ls-remote --heads origin ${{ env.FEATURE_TEST_BRANCH }})" ]; then
            git checkout ${{ env.TEST_BRANCH }}
            git checkout -b ${{ env.FEATURE_TEST_BRANCH }}
            git push origin ${{ env.FEATURE_TEST_BRANCH }}
          else
            git fetch origin ${{ env.FEATURE_TEST_BRANCH }}
            git checkout ${{ env.FEATURE_TEST_BRANCH }}
          fi

      - name: Cherry-pick new commits
        continue-on-error: true
        id: cherry_pick
        if: ${{ env.SKIP_ALL == 'false' }}
        run: |
          echo "Cherry-picking the following commits:"
          echo "${{ env.FEATURE_COMMITS }}"
          git cherry-pick --no-commit ${{ env.FEATURE_COMMITS }} || true
          git status --porcelain | grep '^U'
          if [ -n "$(git status --porcelain | grep '^U')" ]; then
            echo '::error::Cherry-pick failed. Please see ${{ github.event.pull_request.html_url }} for more details.'
            exit 1
          else
            echo "Cherry-pick successful."
          fi

      - name: "Get list of newly cherry-picked commits"
        if: ${{ env.SKIP_ALL == 'false' }}
        run: |
          successful_commits=$(git log --reverse --no-merges --pretty=format:%h origin/${{ env.FEATURE_TEST_BRANCH }}..${{ env.FEATURE_TEST_BRANCH }})
          successful_commits_pretty=$(git log --reverse --no-merges --pretty=format:"- %s (%H)" origin/${{ env.FEATURE_TEST_BRANCH }}..${{ env.FEATURE_TEST_BRANCH }})

          echo -e 'Successful cherry-picks:\n'"$successful_commits_pretty"
          for commit in $successful_commits; do
            echo "::debug::$commit"
          done

          {
            echo "PICKED_COMMITS<<EOF"
            echo "$successful_commits"
            echo "EOF"
          } >> $GITHUB_ENV

      - name: "On success: Commit & push cherry-picked changes"
        if: ${{ env.SKIP_ALL == 'false' && steps.cherry_pick.outcome == 'success' }}
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git commit
          fi
          if [ -z "$(git log origin/${{ env.FEATURE_TEST_BRANCH }}..${{ env.FEATURE_TEST_BRANCH }})" ]; then
            git push origin ${{ env.FEATURE_TEST_BRANCH }}
          fi

      - name: "On failure: Determine missing commits"
        if: ${{ env.SKIP_ALL == 'false' && steps.cherry_pick.outcome == 'failure' }}
        run: |
          feature_commits=(${{ env.FEATURE_COMMITS }})
          picked_commits=(${{ env.PICKED_COMMITS }})

          echo -e 'Feature commits: '"${feature_commits[*]}"
          if [ -n "$picked_commits" ]; then
            echo -e 'Picked commits: '"${picked_commits[*]}"
          fi

          missing_commits=()
          for commit in "${feature_commits[@]}"; do
            if [[ ! " ${picked_commits[@]} " =~ " $commit " ]] ; then
              missing_commits+=($commit)
            fi
          done
          echo 'Missing commits: '"${missing_commits[*]}"

          {
            echo "MISSING_COMMITS<<EOF"
            echo "${missing_commits[*]}"
            echo "EOF"
          } >> $GITHUB_ENV

      - name: "On failure: Abort cherry-pick & push changes"
        if: ${{ env.SKIP_ALL == 'false' && steps.cherry_pick.outcome == 'failure' }}
        run: |
          git reset --hard
          if [ -z "$(git log origin/${{ env.FEATURE_TEST_BRANCH }}..${{ env.FEATURE_TEST_BRANCH }})" ]; then
            echo "Pushing empty commit to ${{ env.FEATURE_TEST_BRANCH }} to create PR."
            git commit --allow-empty -m 'Cherry-pick of `${{ github.head_ref }}` failed.
            Manual resolution required.'
          fi
          git push origin ${{ env.FEATURE_TEST_BRANCH }}

      - name: Ensure bot label exists
        if: ${{ env.SKIP_ALL == 'false' }}
        run: |
          if [ -z "$(gh label list --search "${{ env.BOT_LABEL }}" --limit 1)" ]; then
            gh label create ${{ env.BOT_LABEL }} --color CCCCCC --description "Automated pull requests"
            echo "::notice::Label ${{ env.BOT_LABEL }} added to repository."
          fi

      - name: Create/Update pull request
        if: ${{ env.SKIP_ALL == 'false' }}
        run: |
          if [ "$(gh pr list --base ${{ env.TEST_BRANCH }} --head ${{ env.FEATURE_TEST_BRANCH }} --state open | wc -l)" == 0 ]; then
            TEST_PR_URL=$(gh pr create \
              --base ${{ env.TEST_BRANCH }} \
              --head ${{ env.FEATURE_TEST_BRANCH }} \
              --title "${{ github.event.pull_request.title }} - Test" \
              --label ${{ env.BOT_LABEL }} \
              --assignee ${{ github.actor }} \
              --body 'This automated pull request adds the cherry-picked changes from `${{ github.head_ref }}` to `${{ env.TEST_BRANCH }}`.
              See #${{ github.event.pull_request.number }} for more details.')
            echo "::notice::$TEST_PR_URL created."
          else
            TEST_PR_URL=$(gh pr edit ${{ env.FEATURE_TEST_BRANCH }} \
              --add-assignee ${{ github.actor }})
            echo "::notice::$TEST_PR_URL updated."
          fi
          echo "TEST_PR_URL=$TEST_PR_URL" >> $GITHUB_ENV

      - name: Set pull request status
        if: ${{ env.SKIP_ALL == 'false' }}
        run: |
          if [ "${{ steps.cherry_pick.outcome }}" == "success" ]; then
            gh pr ready ${{ env.FEATURE_TEST_BRANCH }}
          else
            gh pr ready --undo ${{ env.FEATURE_TEST_BRANCH }}
          fi

      - name: Clean up comments
        if: ${{ env.SKIP_ALL == 'false' }}
        uses: actions/github-script@v7
        with:
          script: |
            const urlSubstrings = "${{ env.TEST_PR_URL }}".split('/')
            const newPrNumber = urlSubstrings[urlSubstrings.length - 1]
            const oldPrComments = github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            const newPrComments = github.rest.issues.listComments({
              issue_number: newPrNumber,
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            const allComments = await Promise.all([oldPrComments, newPrComments])
            allComments.forEach(comments => {
              comments.data.forEach(comment => {
                if (comment.user.login === 'github-actions[bot]' && comment.body.startsWith('${{ env.NOTICE_COMMENT_TAG }}')) {
                  github.rest.issues.deleteComment({
                    comment_id: comment.id,
                    owner: context.repo.owner,
                    repo: context.repo.repo
                  })
                  process.stdout.write(`Deleted comment ${comment.html_url}\n`)
                }
              })
            })

      - name: Comment on the new pull request
        id: comment_on_new_pr
        if: ${{ env.SKIP_ALL == 'false' && steps.cherry_pick.outcome == 'failure' && env.DISABLE_COMMENTS == 'false' }}
        run: |
          body='**Automatic ${{ env.TEST_BRANCH }} update failed.**

          To manually resolve the merge conflicts, please follow these steps:

          1) Checkout the latest version of the branch `${{ env.FEATURE_TEST_BRANCH }}` with the following commands:
          ```bash
          git fetch origin ${{ env.FEATURE_TEST_BRANCH }}
          git checkout ${{ env.FEATURE_TEST_BRANCH }}
          git pull origin ${{ env.FEATURE_TEST_BRANCH }}
          git cherry-pick ${{ env.MISSING_COMMITS }}
          ```
          2) Resolve the merge conflicts and push the changes.
          3) Mark the pull request as ready for review to trigger the status checks.'

          COMMENT_URL=$(gh pr comment ${{ env.TEST_PR_URL }} --body "${{ env.NOTICE_COMMENT_TAG }}
          $body")
          echo $COMMENT_URL
          echo "COMMENT_URL=$COMMENT_URL" >> $GITHUB_OUTPUT

      - name: Comment on the original pull request
        if: ${{ env.SKIP_ALL == 'false' && env.DISABLE_COMMENTS == 'false' }}
        run: |
          if [ -n "${{ env.PICKED_COMMITS }}" ]; then
            body='Cherry-picked the following commits from `${{ github.head_ref }}` to `${{ env.FEATURE_TEST_BRANCH }}`:

            '
            for commit in ${{ env.PICKED_COMMITS }}; do
              body="$body"'- $commit
              '
            done
            body="$body"'
            This list was made with the assumption that all listed commits have either been successfully squash merged into `${{ env.TEST_BRANCH }}` or are already present into `${{ env.TEST_BRANCH }}` or are in an active PR for `${{ env.TEST_BRANCH }}`. If a commit is missing or has been reverted, please manually update this list.'
            gh pr comment ${{ github.event.pull_request.number }} --body "${{ env.COMMIT_COMMENT_TAG }}
            $body"
          fi

          if [ "${{ steps.cherry_pick.outcome }}" == "success" ]; then
            body='The cherry-picked changes from `${{ github.head_ref }}` are ready to be added to the `${{ env.TEST_BRANCH }}` branch.

            A new pull request has been created to test the changes. See ${{ steps.comment_on_new_pr.outputs.COMMENT_URL }} for more details.'
          else
            body='Unable to cherry-pick the changes from `${{ github.head_ref }}` to the `${{ env.TEST_BRANCH }}` branch.

            A new pull request has been created to manually resolve the merge conflicts and test the changes. See ${{ steps.comment_on_new_pr.outputs.COMMENT_URL }} for more details.'
          fi
          gh pr comment ${{ github.event.pull_request.number }} --body "${{ env.NOTICE_COMMENT_TAG }}
          $body"

  remove_label:
    name: Remove trigger label
    runs-on: ubuntu-latest
    needs: update_test_branch
    if: ${{ always() && needs.update_test_branch.outputs.LABEL_MATCH == 'true' }}
    steps:
      - name: Checkout repository
        if: ${{ env.SKIP_ALL == 'false' }}
        uses: actions/checkout@v4.1.1

      - name: Set up Git
        if: ${{ env.SKIP_ALL == 'false' }}
        run: |
          git config --global user.name github-actions[bot]
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Remove "${{ env.TRIGGER_LABEL }}" label
        run: |
          gh pr edit ${{ github.event.pull_request.number }} --remove-label "${{ env.TRIGGER_LABEL }}"
