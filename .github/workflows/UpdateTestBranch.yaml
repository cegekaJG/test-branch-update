name: Update Test Branch

on:
  issue_comment:
    types:
      created

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  TEST_BRANCH: test/main
  FEATURE_TEST_PREFIX: test/
  NOTICE_COMMENT_TAG: <!-- UpdateTestBranch/NOTICE -->
  COMMIT_COMMENT_TAG: <!-- UpdateTestBranch/COMMIT -->
  BOT_LABEL: Automated
  DISABLE_COMMENTS: false
  USE_GITHUB_TOKEN: false
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  prepare_update:
    name: Prepare Update Parameters
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '!update-test')
    outputs:
      test_branch: ${{ steps.set_config.outputs.TEST_BRANCH }}
      feature_branch: ${{ steps.get_pr_info.outputs.HEAD_REF }}
      base_branch: ${{ steps.get_pr_info.outputs.BASE_REF }}
      feature_test_prefix: ${{ steps.set_config.outputs.FEATURE_TEST_PREFIX }}
      bot_label: ${{ steps.set_config.outputs.BOT_LABEL }}
      use_github_token: ${{ steps.set_config.outputs.USE_GITHUB_TOKEN == 'true' }}
      disable_comments: ${{ steps.set_config.outputs.DISABLE_COMMENTS }}
      notice_comment_tag: ${{ steps.set_config.outputs.NOTICE_COMMENT_TAG }}
    steps:
      - name: Add reaction to comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: rocket

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Setup jq'
        uses: dcarbone/install-jq-action@v3

      - name: Get PR information
        id: get_pr_info
        run: |
          pr_info=$(gh pr view ${{ github.event.issue.number }} --json headRefName,baseRefName,title)

          printf "::debug::PR info: %q\n" "$pr_info"

          if [ -z "$pr_info" ]; then
            echo "::error::Failed to get PR information. Please try again."
            exit 1
          fi

          head_ref=$(echo "$pr_info" | jq -r '.headRefName')
          base_ref=$(echo "$pr_info" | jq -r '.baseRefName')
          pr_title=$(echo "$pr_info" | jq -r '.title')

          echo "Head ref: $head_ref"
          echo "Base ref: $base_ref"
          echo "PR title: $pr_title"

          echo "HEAD_REF=$head_ref" >> $GITHUB_OUTPUT
          echo "BASE_REF=$base_ref" >> $GITHUB_OUTPUT
          echo "PR_TITLE=$pr_title" >> $GITHUB_OUTPUT

      - name: Set configuration variables
        id: set_config
        run: |
          echo "TEST_BRANCH=${{ vars.UPDATETESTBRANCH_TEST_BRANCH || env.TEST_BRANCH }}" >> $GITHUB_OUTPUT
          echo "FEATURE_TEST_PREFIX=${{ vars.UPDATETESTBRANCH_FEATURE_TEST_PREFIX || env.FEATURE_TEST_PREFIX }}" >> $GITHUB_OUTPUT
          echo "BOT_LABEL=${{ vars.UPDATETESTBRANCH_BOT_LABEL || env.BOT_LABEL }}" >> $GITHUB_OUTPUT
          echo "DISABLE_COMMENTS=${{ vars.UPDATETESTBRANCH_DISABLE_COMMENTS || env.DISABLE_COMMENTS }}" >> $GITHUB_OUTPUT
          echo "USE_GITHUB_TOKEN=${{ vars.UPDATETESTBRANCH_USE_GITHUB_TOKEN || env.USE_GITHUB_TOKEN }}" >> $GITHUB_OUTPUT
          echo "NOTICE_COMMENT_TAG=${{ vars.UPDATETESTBRANCH_NOTICE_COMMENT_TAG || env.NOTICE_COMMENT_TAG }}" >> $GITHUB_OUTPUT
          echo "COMMIT_COMMENT_TAG=${{ vars.UPDATETESTBRANCH_COMMIT_COMMENT_TAG || env.COMMIT_COMMENT_TAG }}" >> $GITHUB_OUTPUT

  call_core_workflow:
    name: Call Core Update Workflow
    needs: prepare_update
    uses: ./.github/workflows/UpdateTestBranchCore.yaml
    with:
      test_branch: ${{ needs.prepare_update.outputs.test_branch }}
      feature_branch: ${{ needs.prepare_update.outputs.feature_branch }}
      base_branch: ${{ needs.prepare_update.outputs.base_branch }}
      feature_test_prefix: ${{ needs.prepare_update.outputs.feature_test_prefix }}
      bot_label: ${{ needs.prepare_update.outputs.bot_label }}
      use_github_token: ${{ needs.prepare_update.outputs.use_github_token == 'true' }}
    secrets:
      GHTOKENWORKFLOW: ${{ secrets.GHTOKENWORKFLOW }}

  add_reaction:
    name: Add Reaction
    needs: [prepare_update, call_core_workflow]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Add reaction based on outcome
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: ${{ needs.call_core_workflow.outputs.cherry_pick_success == 'true' && '+1' || '-1' }}

  cleanup_comments:
    name: Clean up comments
    needs: [prepare_update, call_core_workflow]
    if: always() && needs.call_core_workflow.outputs.test_pr_url != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean up old comments
        uses: actions/github-script@v7
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            (async () => {
              let newPrComments = [];
              if ("${{ needs.call_core_workflow.outputs.test_pr_url }}") {
                const urlSubstrings = "${{ needs.call_core_workflow.outputs.test_pr_url }}".split('/');
                const newPrNumber = urlSubstrings[urlSubstrings.length - 1];
                try {
                  newPrComments = await github.rest.issues.listComments({
                    issue_number: newPrNumber,
                    owner: context.repo.owner,
                    repo: context.repo.repo
                  });
                } catch (error) {
                  process.stdout.write(`::error::Error retrieving comments from ${newPrNumber}: ${error.message}\n`);
                  process.exit(1);
                }
              }
              let oldPrComments = [];
              try {
                oldPrComments = await github.rest.issues.listComments({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });
              } catch (error) {
                process.stdout.write(`::error::Error retrieving comments from ${context.issue.number}: ${error.message}\n`);
                process.exit(1);
              }
              const allComments = [oldPrComments, newPrComments];
              allComments.forEach(comments => {
                comments.data.forEach(comment => {
                  if (comment.user.login === 'github-actions[bot]' && comment.body.startsWith('${{ needs.prepare_update.outputs.notice_comment_tag }}')) {
                    try {
                      await github.rest.issues.deleteComment({
                        comment_id: comment.id,
                        owner: context.repo.owner,
                        repo: context.repo.repo
                      });
                      process.stdout.write(`Deleted comment ${comment.html_url}\n`);
                    } catch (error) {
                      process.stdout.write(`::notice::Error deleting comment ${comment.html_url}: ${error.message}\n`);
                    }
                  }
                });
              });
            })();

  comment_on_prs:
    name: Comment on PRs
    needs: [prepare_update, call_core_workflow]
    if: always() && needs.call_core_workflow.outputs.test_pr_url != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Comment on test PR (on failure)
        if: needs.call_core_workflow.outputs.cherry_pick_success == 'false' && needs.prepare_update.outputs.disable_comments == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEST_BRANCH: ${{ needs.prepare_update.outputs.test_branch }}
          FEATURE_TEST_BRANCH: ${{ needs.call_core_workflow.outputs.feature_test_branch }}
          TEST_PR_URL: ${{ needs.call_core_workflow.outputs.test_pr_url }}
          NOTICE_COMMENT_TAG: ${{ needs.prepare_update.outputs.notice_comment_tag }}
        run: |
          body="**Automatic ${TEST_BRANCH} update failed.**

          To manually resolve the merge conflicts, please follow these steps:

          1) Checkout the latest version of the branch \`${FEATURE_TEST_BRANCH}\` with the following commands:
          \`\`\`bash
          git fetch origin ${FEATURE_TEST_BRANCH}
          git checkout ${FEATURE_TEST_BRANCH}
          git reset --hard origin/${FEATURE_TEST_BRANCH}
          \`\`\`
          2) Manually cherry-pick the failing commits and resolve any conflicts.
          3) Push the changes and the PR will be updated automatically.
          4) Re-run the workflow by commenting \`!update-test\` in ${{ github.event.issue.pull_request.html_url }} again."

          gh pr comment "${TEST_PR_URL}" --body "${NOTICE_COMMENT_TAG}
          ${body}"

      - name: Comment on original PR
        if: needs.prepare_update.outputs.disable_comments == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FEATURE_BRANCH: ${{ needs.prepare_update.outputs.feature_branch }}
          TEST_BRANCH: ${{ needs.prepare_update.outputs.test_branch }}
          TEST_PR_URL: ${{ needs.call_core_workflow.outputs.test_pr_url }}
          NOTICE_COMMENT_TAG: ${{ needs.prepare_update.outputs.notice_comment_tag }}
          CHERRY_PICK_SUCCESS: ${{ needs.call_core_workflow.outputs.cherry_pick_success }}
        run: |
          if [ "${CHERRY_PICK_SUCCESS}" == "true" ]; then
            body="The cherry-picked changes from \`${FEATURE_BRANCH}\` are ready to be added to the \`${TEST_BRANCH}\` branch.

            A new pull request has been created to test the changes. See ${TEST_PR_URL} for more details."
          else
            body="Unable to cherry-pick the changes from \`${FEATURE_BRANCH}\` to the \`${TEST_BRANCH}\` branch.

            A new pull request has been created to manually resolve the merge conflicts and test the changes. See ${TEST_PR_URL} for more details."
          fi
          gh pr comment ${{ github.event.issue.number }} --body "${NOTICE_COMMENT_TAG}
          ${body}"