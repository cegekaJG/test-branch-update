name: Update Test Branch

on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main

env:
  TEST_BRANCH: testmaster
  CHERRY_PICK_BRANCH: ${{ github.head_ref }}-cherry-pick
  FEATURE_TEST_BRANCH: ${{ github.head_ref }}-test

jobs:
  update_test_branch:
    name: Update Test Branch
    runs-on: ubuntu-latest
    steps:
      - name: Check draft status
        id: check_draft
        run: |
          if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
            echo "::notice::This pull request is a draft. Update workflow cancelled."
            exit 0
          fi

      - name: Set up Git
        run: |
          git config --global user.name github-actions[bot]
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Check if ${{ env.TEST_BRANCH }} exists
        id: check_test_branch
        run: |
          if [ -z "$(git ls-remote --heads origin ${{ env.TEST_BRANCH }})" ]; then
            echo "::error::Branch ${{ env.TEST_BRANCH }} does not exist. Please create the branch and try again."
            exit 1
          fi

      - name: Get newest commit hash
        id: get_commit_hash
        run: |
          newest_commit_hash=$(git rev-parse --short HEAD)
          echo "NEWEST_COMMIT_HASH=$newest_commit_hash" >> "$GITHUB_OUTPUT"
          echo "Newest commit hash (short): $newest_commit_hash"

      - name: Create temporary cherry-pick branch of target branch
        id: create_temp_branch
        run: |
          git fetch origin ${{ github.base_ref }}
          git checkout ${{ github.base_ref }}
          git checkout -b ${{ env.CHERRY_PICK_BRANCH}}

      - name: Squash merge ${{ github.head_ref }} into ${{ env.CHERRY_PICK_BRANCH }}
        id: merge_commit
        run: |
          git fetch origin ${{ github.head_ref }}
          git branch --all | grep ${{ github.head_ref}}

          merge_commit_msg="CHERRYPICK-ME ${{ github.head_ref }}/${{ steps.get_commit_hash.outputs.NEWEST_COMMIT_HASH }}"

          git merge --squash -n "origin/${{ github.head_ref }}"
          git commit -m "$merge_commit_msg"

          if [ "$(git status --porcelain)" ]; then
            echo "::error::Unable to create squash merge commit. Please merge the latest changes to ${{ github.base_ref}} into the head branch ${{ github.head_ref }} and try again."
            exit 1
          fi

          echo "MERGE_COMMIT_MSG=$merge_commit_msg" >> "$GITHUB_OUTPUT"
          echo "MERGE_COMMIT_SHA=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Create/Checkout ${{ env.FEATURE_TEST_BRANCH }}
        run: |
          git fetch origin ${{ env.TEST_BRANCH }}
          git checkout ${{ env.TEST_BRANCH }}
          git checkout -B ${{ env.FEATURE_TEST_BRANCH }}
          git push origin ${{ env.FEATURE_TEST_BRANCH }}

      - name: Cherry-pick squash merge commit
        continue-on-error: true
        id: cherry_pick
        run: |
          git cherry-pick -n ${{ steps.merge_commit.outputs.MERGE_COMMIT_SHA }}
          if [ $? -ne 0 ]; then
            echo "::error::Cherry-pick failed. Please cherry-pick the commit '${{ steps.merge_commit.outputs.MERGE_COMMIT_MSG }} (${{ steps.merge_commit.outputs.MERGE_COMMIT_SHA }}) into ${{ env.FEATURE_TEST_BRANCH}}"
            exit 1
          fi

      - name: "On success: Commit & push cherry-picked changes"
        if: ${{ steps.cherry_pick.outcome == 'success'}}
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Cherry-pick changes from ${{ github.head_ref }} up to ${{ steps.get_commit_hash.outputs.NEWEST_COMMIT_HASH }}"
          fi
          git push origin ${{ env.FEATURE_TEST_BRANCH }}
          git push origin --delete ${{ env.CHERRY_PICK_BRANCH }}

      - name: "On failure: Abort cherry-pick & push temporary cherry-pick branch"
        if: ${{ steps.cherry_pick.outcome == 'failure'}}
        run: |
          git cherry-pick --abort
          git checkout ${{ env.CHERRY_PICK_BRANCH}}
          git push origin ${{ env.CHERRY_PICK_BRANCH}}

      - name: Report merge conflict
        if: ${{ steps.cherry_pick.outcome == 'failure'}}
        uses: actions/github-script@v7
        with:
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '@${{ github.actor }}: ${{ env.TEST_BRANCH }} update failed.\n' +
              'To manually resolve the merge conflicts, please follow these steps:\n\n' +
              '1) Checkout the branch ${{ env.FEATURE_TEST_BRANCH }}.\n' +
              '2) In a terminal with Git, enter the command `git cherry-pick ' +
              '${{ steps.merge_commit.outputs.MERGE_COMMIT_SHA }} -m ' +
              '"Cherry-pick changes from ${{ github.head_ref }} up to ' +
              '${{ steps.get_commit_hash.outputs.NEWEST_COMMIT_HASH }}"` to ' +
              'start the cherry-pick.\n' +
              '3) Resolve the merge conflicts and push the changes.\n' +
              '4) Delete the branch ${{ env.CHERRY_PICK_BRANCH }} with the command ' +
              '`git push origin --delete ${{ env.CHERRY_PICK_BRANCH }}`.'
            })

      - name: Create pull request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.FEATURE_TEST_BRANCH }}
          base: ${{ env.TEST_BRANCH }}
          title: ${{ github.event.pull_request.title}} - Test
          labels: Automated
          body: |
            This automated pull request adds the cherry-picked changes from ${{ github.head_ref }} into ${{ env.TEST_BRANCH }}.
            See #${{ github.event.pull_request.number }} for more details.
